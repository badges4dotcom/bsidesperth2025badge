
//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'D:\Archive\Extracts\Small\24bit\Person7.bmp'.
//

const byte Person7_RLEBM_data[] PROGMEM_LATE = 
{
	0xf0, 0x11, 0x02, 0x19, 0x13, 0xf0, 
	0xf0, 0x14, 0x21, 0x14, 0x21, 0x12, 0x11, 0x12, 0x11, 0xa2, 0x51, 0x12, 0x13, 0xf0, 
	0xf0, 0x14, 0x71, 0xd2, 0x41, 0x12, 0x13, 0xf0, 
	0xf0, 0x14, 0x91, 0x22, 0x11, 0x22, 0x21, 0x12, 0x11, 0x22, 0x51, 0x13, 0xf0, 
	0xa0, 0x55, 0xb1, 0x12, 0x61, 0x32, 0x51, 0x16, 0x35, 0x23, 0xa0, 
	0xa0, 0x12, 0x41, 0x07, 0x1a, 0x18, 0x31, 0x22, 0xa0, 
	0xa0, 0x12, 0x41, 0x07, 0x1a, 0x61, 0xa0, 
	0xa0, 0x12, 0x31, 0x14, 0x07, 0x1a, 0x51, 0x12, 0xa0, 
	0xa0, 0x12, 0x11, 0x14, 0x11, 0x14, 0x07, 0x1a, 0x18, 0x51, 0xa0, 
	0xa0, 0x12, 0x11, 0x34, 0x07, 0x1a, 0x41, 0x24, 0xa0, 
	0x40, 0x16, 0x54, 0xb7, 0xf9, 0x97, 0x19, 0x17, 0x11, 0x22, 0x11, 0x12, 0x50, 
	0x40, 0x13, 0x54, 0xb7, 0xf9, 0x97, 0x29, 0x14, 0x11, 0x14, 0x21, 0x50, 
	0x40, 0x13, 0x54, 0xb7, 0xf9, 0x97, 0x29, 0x14, 0x41, 0x50, 
	0x40, 0x16, 0x54, 0xb7, 0xf9, 0x97, 0x29, 0x31, 0x14, 0x11, 0x50, 
	0x40, 0x13, 0x54, 0xb7, 0xf9, 0x97, 0x29, 0x11, 0x34, 0x11, 0x50, 
	0x40, 0x13, 0x54, 0x59, 0x07, 0x1a, 0x69, 0x44, 0x11, 0x50, 
	0x40, 0x13, 0x54, 0x59, 0x07, 0x1a, 0x69, 0x44, 0x12, 0x50, 
	0x40, 0x13, 0x54, 0x59, 0x07, 0x1a, 0x69, 0x44, 0x11, 0x50, 
	0x40, 0x13, 0x54, 0x59, 0x07, 0x1a, 0x69, 0x44, 0x11, 0x15, 0x40, 
	0x40, 0x13, 0x54, 0x59, 0x07, 0x1a, 0x69, 0x44, 0x11, 0x50, 
	0x40, 0x13, 0x54, 0x59, 0x68, 0xf7, 0x58, 0x69, 0x44, 0x11, 0x50, 
	0x40, 0x15, 0x56, 0x59, 0x5a, 0x18, 0xf7, 0x5a, 0x69, 0x44, 0x11, 0x50, 
	0x40, 0x15, 0x56, 0x59, 0x5a, 0x18, 0xf7, 0x5a, 0x69, 0x54, 0x50, 
	0x40, 0x15, 0x46, 0x13, 0x59, 0x5a, 0x18, 0xf7, 0x5a, 0x69, 0x54, 0x50, 
	0x40, 0x15, 0x56, 0x59, 0x5a, 0x18, 0xf7, 0x5a, 0x69, 0x54, 0x50, 
	0x45, 0x13, 0x11, 0x44, 0x59, 0x56, 0x1a, 0xf7, 0x16, 0x4a, 0x69, 0x52, 0x13, 0x35, 0x13, 
	0x16, 0x33, 0x16, 0x52, 0x59, 0x16, 0x15, 0x13, 0x25, 0x1a, 0xf7, 0x55, 0xb9, 0x14, 0x36, 0x14, 
	0x16, 0x33, 0x16, 0x52, 0x59, 0x16, 0x45, 0x11, 0xf7, 0x45, 0x13, 0xb9, 0x56, 
	0x16, 0x33, 0x16, 0x42, 0x11, 0x59, 0x14, 0x45, 0x11, 0xf7, 0x45, 0x13, 0xb9, 0x56, 
	0x43, 0x16, 0x52, 0x59, 0x14, 0x45, 0x1a, 0xf7, 0x55, 0xb9, 0x56, 
	0x16, 0x13, 0x16, 0x13, 0x14, 0x52, 0x59, 0x16, 0x45, 0x11, 0xf7, 0x45, 0x13, 0xb9, 0x46, 0x14, 
	0x53, 0x56, 0x59, 0x16, 0x45, 0x1a, 0xf7, 0x55, 0x69, 0x54, 0x15, 0x33, 0x16, 
	0x53, 0x56, 0x59, 0x16, 0x45, 0x11, 0xf7, 0x55, 0x69, 0x54, 0x53, 
	0x53, 0x34, 0x26, 0x59, 0x14, 0x45, 0x11, 0xf7, 0x55, 0x69, 0x54, 0x53, 
	0x53, 0x14, 0x16, 0x24, 0x16, 0x59, 0x14, 0x45, 0x11, 0xf7, 0x55, 0x69, 0x54, 0x43, 0x16, 
	0x53, 0x14, 0x16, 0x34, 0x59, 0x14, 0x43, 0x11, 0xf7, 0x13, 0x16, 0x33, 0x69, 0x54, 0x43, 0x16, 
	0x40, 0x15, 0x53, 0x56, 0x09, 0x1a, 0x11, 0x54, 0x53, 0x50, 
	0x40, 0x15, 0x53, 0x56, 0x09, 0x1a, 0x11, 0x54, 0x43, 0x16, 0x50, 
	0x40, 0x15, 0x53, 0x56, 0x09, 0x1a, 0x12, 0x54, 0x16, 0x13, 0x16, 0x13, 0x16, 0x50, 
	0x40, 0x15, 0x53, 0x56, 0x09, 0x1a, 0x11, 0x54, 0x43, 0x16, 0x50, 
	0x40, 0x15, 0x53, 0x36, 0x14, 0x16, 0x09, 0x1a, 0x11, 0x54, 0x43, 0x16, 0x50, 
	0x40, 0x15, 0x93, 0x16, 0x31, 0x12, 0x11, 0x02, 0x10, 0x11, 0x42, 0x14, 0x56, 0x53, 0x50, 
	0xa0, 0x5b, 0x5c, 0x16, 0xe2, 0x11, 0xbb, 0xa0, 
	0xa0, 0x5b, 0x5c, 0x16, 0xe2, 0x11, 0xbb, 0xa0, 
	0xa0, 0x5b, 0x5c, 0x16, 0xf2, 0xbb, 0xa0, 
	0xa0, 0x5b, 0x5c, 0x16, 0xf2, 0xbb, 0xa0, 
	0x40, 0x1b, 0x1c, 0x4b, 0x1d, 0x4c, 0x5d, 0x1c, 0xfe, 0xbd, 0x5b, 0x50, 
	0x40, 0x6b, 0x5c, 0x1d, 0x1c, 0x2d, 0x0c, 0x11, 0xbd, 0x4b, 0x1c, 0x50, 
	0x40, 0x6b, 0x1d, 0x4c, 0x1d, 0x1c, 0x1d, 0x0c, 0x10, 0x1b, 0x1c, 0xbd, 0x4b, 0x1c, 0x50, 
	0x40, 0x6b, 0x5c, 0x5d, 0x0c, 0x10, 0xbd, 0x3b, 0x2c, 0x50, 
	0x40, 0x6b, 0x6c, 0x4d, 0xec, 0x1b, 0x1c, 0xbd, 0x1b, 0x4c, 0x50, 
	0x40, 0x1b, 0x1c, 0x4b, 0x5c, 0x5d, 0x2c, 0x1b, 0x2c, 0x1b, 0x2c, 0x1b, 0x7c, 0xbd, 0x2b, 0x3c, 0x50, 
	0x4b, 0x1c, 0x0f, 0x2f, 0x5b, 
	0x4b, 0x1c, 0x3f, 0x2d, 0x0f, 0x2a, 0x5b, 
	0x4b, 0x1c, 0x2f, 0x1d, 0x1f, 0x1d, 0x0f, 0x2a, 0x1c, 0x4b, 
	0x4b, 0x1c, 0x3f, 0x2d, 0x0f, 0x2a, 0x1c, 0x4b, 
	0x4b, 0x1c, 0x0f, 0x2f, 0x5b, 
	0x4b, 0x1c, 0xad, 0x0f, 0x1a, 0x6d, 0x1f, 0x4d, 0x5b, 
	0x4b, 0x5c, 0x1d, 0x5c, 0x0f, 0x1a, 0x1d, 0x5c, 0x5d, 0x1c, 0x4b, 
	0x5b, 0x4c, 0x1d, 0x5c, 0x0f, 0x1a, 0x1d, 0x5c, 0x5d, 0x1c, 0x3b, 0x1c, 
	0x5b, 0x1d, 0x9c, 0x0f, 0x1a, 0x1d, 0x5c, 0x5d, 0x1c, 0x4b, 
	0x5b, 0x1d, 0x2c, 0x1d, 0x6c, 0x0f, 0x1a, 0x1d, 0x5c, 0x5d, 0x1c, 0x4b, 
	0x5b, 0x1d, 0x9c, 0x0f, 0x1a, 0x6c, 0x5d, 0x1c, 0x4b, 
	0x16, 0x33, 0x16, 0x58, 0x1a, 0x4c, 0x0f, 0x1a, 0x5c, 0x1e, 0x57, 0x14, 0x46, 
	0x56, 0x58, 0x1a, 0x4c, 0x0f, 0x1a, 0x5c, 0x1e, 0x57, 0x14, 0x46, 
	0x56, 0x58, 0x1a, 0x4c, 0x0f, 0x1a, 0x1d, 0x4c, 0x1e, 0x57, 0x14, 0x46, 
	0x56, 0x58, 0x1a, 0x4c, 0x0f, 0x1a, 0x1d, 0x4c, 0x1e, 0x57, 0x14, 0x46, 
	0x56, 0x58, 0x1a, 0x4c, 0x0f, 0x1a, 0x1d, 0x4c, 0x1e, 0x57, 0x14, 0x46, 
	0x56, 0x58, 0x1a, 0x4b, 0x0c, 0x1a, 0x5b, 0x1e, 0x17, 0x38, 0x17, 0x14, 0x46, 
	0x56, 0x58, 0x1a, 0x4b, 0x0c, 0x15, 0x1b, 0x4c, 0x5b, 0x1e, 0x48, 0x17, 0x14, 0x46, 
	0x56, 0x11, 0x48, 0x1a, 0x4b, 0x0c, 0x1a, 0x5b, 0x1e, 0x48, 0x17, 0x14, 0x46, 
	0x46, 0x14, 0x58, 0x1a, 0x4b, 0x0c, 0x15, 0x3b, 0x2c, 0x5b, 0x1e, 0x58, 0x14, 0x46, 
	0x46, 0x14, 0x58, 0x1a, 0x4b, 0x0c, 0x15, 0x2b, 0x1c, 0x1b, 0x1c, 0x5b, 0x1e, 0x48, 0x17, 0x14, 0x46, 
	0x43, 0x16, 0x21, 0x1a, 0x21, 0x16, 0x4b, 0x7c, 0x2d, 0x0c, 0x11, 0x5b, 0x1e, 0x51, 0x16, 0x43, 
	0x40, 0x15, 0x16, 0x43, 0x1e, 0x4b, 0x3c, 0xdd, 0x5c, 0x1d, 0x1c, 0x3d, 0x1c, 0x5b, 0x43, 0x16, 0x50, 
	0x40, 0x15, 0x53, 0x1e, 0x4b, 0x3c, 0xdd, 0x5c, 0x5d, 0x1c, 0x5b, 0x43, 0x16, 0x50, 
	0x40, 0x15, 0x53, 0x1e, 0x4b, 0x2c, 0xfd, 0x4c, 0x5d, 0x1c, 0x5b, 0x43, 0x16, 0x15, 0x40, 
	0x40, 0x15, 0x13, 0x16, 0x33, 0x5b, 0x5c, 0xdd, 0x3c, 0x3d, 0x1c, 0x1d, 0x1c, 0x5b, 0x43, 0x16, 0x15, 0x40, 
	0x40, 0x15, 0x16, 0x13, 0x16, 0x23, 0x1e, 0x4b, 0x3c, 0x8d, 0x5b, 0x4c, 0x6d, 0x1c, 0x5b, 0x43, 0x16, 0x15, 0x40, 
	0xa0, 0x5b, 0x3c, 0x1d, 0x1c, 0x6d, 0x5b, 0x5c, 0x5d, 0x1c, 0x5b, 0xa0, 
	0xa0, 0x5b, 0x1c, 0x2d, 0x2c, 0x6d, 0x5b, 0x5c, 0x5d, 0x1c, 0x5b, 0xa0, 
	0xa0, 0x5b, 0x1d, 0x1c, 0x2d, 0x1c, 0x6d, 0x5b, 0x5c, 0x5d, 0x1c, 0x5b, 0xa0, 
	0xa0, 0x5b, 0x1d, 0x1c, 0x2d, 0x1c, 0x6d, 0x5b, 0x5c, 0x5d, 0x1c, 0x5b, 0xa0, 
	0xa0, 0x5b, 0x5c, 0x6d, 0x5b, 0x4c, 0x6d, 0x1c, 0x5b, 0xa0, 
	0xa0, 0xab, 0x1c, 0x3b, 0x2c, 0x50, 0x5b, 0x4c, 0x7b, 0xa0, 
	0xa0, 0x7b, 0x1c, 0x2b, 0x1c, 0x1b, 0x4c, 0x50, 0x5b, 0x1c, 0x1b, 0x3c, 0x6b, 0xa0, 
	0xa0, 0xab, 0x3c, 0x1b, 0x1c, 0x1b, 0x50, 0x5b, 0x5c, 0x6b, 0xa0, 
	0xa0, 0xab, 0x6c, 0x50, 0x5b, 0x5c, 0x6b, 0xa0, 
	0xa0, 0xab, 0x2c, 0x2b, 0x2c, 0x50, 0x5b, 0x2c, 0x2b, 0x1c, 0x6b, 0xa0, 
	0xa0, 0x15, 0x13, 0x35, 0x26, 0x24, 0x26, 0x53, 0x15, 0x40, 0xa6, 0x63, 0xa0, 
	0xa0, 0x55, 0x26, 0x14, 0x26, 0x63, 0x15, 0x40, 0xa6, 0x43, 0x15, 0x13, 0xa0, 
	0xa0, 0x25, 0x23, 0x15, 0x56, 0x63, 0x15, 0x40, 0xa6, 0x33, 0x15, 0x23, 0xa0, 
	0xa0, 0x55, 0x56, 0x63, 0x15, 0x40, 0xa6, 0x13, 0x25, 0x33, 0xa0, 
	0xa0, 0x55, 0x56, 0x63, 0x15, 0x40, 0xa6, 0x13, 0x45, 0x13, 0xa0, 
	0xa0, 0x55, 0x93, 0x15, 0x13, 0x15, 0x40, 0x36, 0x93, 0x15, 0x33, 0xa0, 
	0xa0, 0x15, 0x13, 0x35, 0x83, 0x15, 0x23, 0x15, 0x40, 0xc3, 0x15, 0x13, 0x15, 0x13, 0xa0, 
	0xa0, 0x15, 0x13, 0x15, 0x13, 0x15, 0x53, 0x15, 0x53, 0x15, 0x40, 0xa3, 0x15, 0x13, 0x15, 0x13, 0x25, 0xa0, 
	0xa0, 0x55, 0xb3, 0x15, 0x40, 0xd3, 0x25, 0x13, 0xa0, 
	0xa0, 0x55, 0xb3, 0x15, 0x40, 0xe3, 0x15, 0x13, 0xa0, 
	0xa0, 0x15, 0xf3, 0x15, 0x40, 0x03, 0x10, 0xa0, 
	
}; // 57x100 Bitmap (5700 pixels) in 1170 bytes

const uint16_t Person7_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0x0000, 0x92c6, 0x9a85, 0x3922, 0x69e4, 0x28c2, 0x51a4, 0xe4ec, 0xc42a, 0xd3e8, 0x936a, 0x1946, 0x21e9, 0x2a8c, 0x41c8, 0x4350, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_Person7_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(Person7_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(Person7_RLEBM_palette);
	bmInfo.width = 57;
	bmInfo.height = 100;
	bmInfo.flags = 0x01;
}
