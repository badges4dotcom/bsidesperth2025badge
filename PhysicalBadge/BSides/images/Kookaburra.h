
//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'D:\NewImages-2\Small\Kookaburra.bmp'.
//

const byte Kookaburra_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x28, 
	0x00, 0x28, 
	0x00, 0x0a, 0x01, 0x03, 0x02, 0x0b, 0x03, 0x01, 0x01, 0x02, 0x04, 0x01, 0x00, 0x0c, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x08, 0x07, 0x03, 0x08, 0x01, 0x05, 0x02, 0x09, 0x01, 0x00, 0x0c, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x05, 0x07, 0x01, 0x06, 0x01, 0x07, 0x01, 0x06, 0x01, 0x07, 0x02, 0x08, 0x01, 0x05, 0x02, 0x09, 0x01, 0x00, 0x0c, 
	0x00, 0x01, 0x0a, 0x01, 0x0b, 0x07, 0x0c, 0x01, 0x03, 0x01, 0x01, 0x02, 0x05, 0x01, 0x02, 0x04, 0x08, 0x01, 0x06, 0x05, 0x07, 0x01, 0x0d, 0x02, 0x01, 0x01, 0x00, 0x0c, 
	0x00, 0x01, 0x0b, 0x01, 0x0e, 0x04, 0x0f, 0x02, 0x0e, 0x01, 0x0f, 0x04, 0x10, 0x02, 0x11, 0x01, 0x0a, 0x02, 0x02, 0x01, 0x06, 0x01, 0x07, 0x01, 0x06, 0x03, 0x07, 0x01, 0x06, 0x02, 0x03, 0x01, 0x00, 0x0c, 
	0x00, 0x01, 0x0b, 0x01, 0x0f, 0x05, 0x0e, 0x01, 0x0f, 0x01, 0x0e, 0x01, 0x0f, 0x01, 0x0e, 0x02, 0x10, 0x02, 0x11, 0x01, 0x0a, 0x02, 0x02, 0x01, 0x06, 0x01, 0x07, 0x01, 0x06, 0x03, 0x07, 0x01, 0x06, 0x02, 0x03, 0x01, 0x00, 0x0c, 
	0x00, 0x01, 0x0a, 0x01, 0x0b, 0x0b, 0x0a, 0x05, 0x12, 0x01, 0x03, 0x08, 0x12, 0x01, 0x00, 0x0c, 
	0x00, 0x01, 0x13, 0x01, 0x0a, 0x05, 0x13, 0x02, 0x0a, 0x12, 0x11, 0x01, 0x00, 0x0c, 
	0x00, 0x01, 0x13, 0x01, 0x0a, 0x04, 0x13, 0x04, 0x0a, 0x11, 0x11, 0x01, 0x00, 0x0c, 
	0x00, 0x0a, 0x05, 0x01, 0x02, 0x02, 0x07, 0x0b, 0x03, 0x01, 0x0a, 0x02, 0x11, 0x01, 0x00, 0x0c, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x0b, 0x03, 0x01, 0x0a, 0x02, 0x11, 0x01, 0x00, 0x0c, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x0b, 0x03, 0x01, 0x0a, 0x02, 0x11, 0x01, 0x00, 0x0c, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x05, 0x0d, 0x01, 0x0a, 0x02, 0x0c, 0x01, 0x14, 0x03, 0x15, 0x05, 0x00, 0x0a, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x05, 0x0d, 0x01, 0x0a, 0x02, 0x0c, 0x01, 0x14, 0x02, 0x15, 0x06, 0x00, 0x0a, 
	0x00, 0x0a, 0x08, 0x03, 0x06, 0x02, 0x07, 0x01, 0x06, 0x02, 0x0d, 0x01, 0x0a, 0x02, 0x0c, 0x01, 0x16, 0x08, 0x17, 0x03, 0x00, 0x07, 
	0x00, 0x0a, 0x07, 0x01, 0x06, 0x07, 0x0d, 0x01, 0x0a, 0x02, 0x14, 0x01, 0x18, 0x08, 0x15, 0x03, 0x00, 0x07, 
	0x00, 0x0a, 0x06, 0x03, 0x07, 0x01, 0x06, 0x04, 0x0d, 0x01, 0x0a, 0x02, 0x14, 0x01, 0x18, 0x08, 0x15, 0x03, 0x00, 0x07, 
	0x00, 0x0a, 0x07, 0x01, 0x06, 0x03, 0x07, 0x01, 0x06, 0x03, 0x0d, 0x01, 0x0a, 0x02, 0x14, 0x01, 0x18, 0x08, 0x16, 0x03, 0x00, 0x07, 
	0x00, 0x0a, 0x06, 0x02, 0x07, 0x01, 0x06, 0x05, 0x0d, 0x01, 0x0a, 0x02, 0x14, 0x01, 0x18, 0x0b, 0x00, 0x07, 
	0x00, 0x0a, 0x06, 0x08, 0x0d, 0x01, 0x0a, 0x02, 0x14, 0x01, 0x18, 0x0b, 0x00, 0x07, 
	0x00, 0x0a, 0x08, 0x03, 0x06, 0x05, 0x07, 0x01, 0x0d, 0x02, 0x02, 0x01, 0x14, 0x02, 0x18, 0x09, 0x17, 0x03, 0x00, 0x04, 
	0x00, 0x0a, 0x05, 0x03, 0x06, 0x07, 0x07, 0x01, 0x08, 0x01, 0x0a, 0x02, 0x16, 0x01, 0x18, 0x08, 0x17, 0x03, 0x00, 0x04, 
	0x00, 0x0a, 0x05, 0x02, 0x02, 0x01, 0x06, 0x04, 0x07, 0x02, 0x06, 0x02, 0x08, 0x01, 0x0a, 0x02, 0x16, 0x01, 0x18, 0x08, 0x17, 0x03, 0x00, 0x04, 
	0x00, 0x0a, 0x01, 0x03, 0x08, 0x02, 0x0d, 0x01, 0x06, 0x05, 0x0d, 0x01, 0x02, 0x02, 0x01, 0x01, 0x14, 0x05, 0x18, 0x03, 0x15, 0x03, 0x00, 0x04, 
	0x00, 0x0d, 0x08, 0x01, 0x05, 0x01, 0x08, 0x01, 0x06, 0x03, 0x07, 0x01, 0x06, 0x01, 0x0d, 0x01, 0x02, 0x01, 0x05, 0x01, 0x01, 0x01, 0x0a, 0x04, 0x0c, 0x01, 0x18, 0x03, 0x15, 0x03, 0x00, 0x04, 
	0x00, 0x0d, 0x08, 0x01, 0x05, 0x01, 0x08, 0x01, 0x06, 0x05, 0x0d, 0x01, 0x05, 0x02, 0x01, 0x01, 0x0a, 0x04, 0x0c, 0x01, 0x18, 0x03, 0x15, 0x03, 0x00, 0x04, 
	0x00, 0x0d, 0x04, 0x02, 0x01, 0x01, 0x05, 0x08, 0x02, 0x03, 0x09, 0x01, 0x0a, 0x02, 0x0b, 0x01, 0x0a, 0x01, 0x0b, 0x01, 0x0a, 0x03, 0x00, 0x04, 
	0x00, 0x0f, 0x09, 0x01, 0x05, 0x09, 0x02, 0x01, 0x05, 0x01, 0x09, 0x01, 0x0a, 0x08, 0x00, 0x04, 
	0x00, 0x0f, 0x12, 0x01, 0x02, 0x0b, 0x01, 0x01, 0x12, 0x02, 0x0a, 0x06, 0x11, 0x01, 0x10, 0x01, 0x00, 0x02, 
	0x00, 0x0f, 0x19, 0x01, 0x1a, 0x02, 0x1b, 0x01, 0x00, 0x02, 0x1c, 0x01, 0x1d, 0x02, 0x1c, 0x01, 0x00, 0x02, 0x05, 0x03, 0x1a, 0x03, 0x0a, 0x05, 0x13, 0x01, 0x00, 0x01, 
	0x00, 0x0f, 0x19, 0x01, 0x1a, 0x02, 0x1b, 0x01, 0x00, 0x02, 0x1c, 0x01, 0x1d, 0x02, 0x1c, 0x01, 0x00, 0x02, 0x05, 0x03, 0x1a, 0x03, 0x0a, 0x05, 0x13, 0x01, 0x00, 0x01, 
	0x00, 0x0d, 0x19, 0x03, 0x1a, 0x03, 0x19, 0x01, 0x1b, 0x01, 0x1e, 0x01, 0x1d, 0x02, 0x1c, 0x01, 0x00, 0x02, 0x02, 0x03, 0x1a, 0x03, 0x0a, 0x05, 0x13, 0x01, 0x00, 0x01, 
	0x00, 0x0d, 0x1a, 0x05, 0x1e, 0x01, 0x1d, 0x05, 0x1c, 0x01, 0x00, 0x05, 0x1a, 0x05, 0x1b, 0x01, 0x0a, 0x02, 0x13, 0x01, 0x00, 0x01, 
	0x00, 0x0d, 0x1a, 0x05, 0x1e, 0x01, 0x1d, 0x05, 0x1c, 0x01, 0x00, 0x05, 0x1a, 0x05, 0x1b, 0x01, 0x0a, 0x02, 0x13, 0x01, 0x00, 0x01, 
	0x00, 0x0d, 0x1a, 0x05, 0x1c, 0x01, 0x1d, 0x05, 0x1c, 0x01, 0x00, 0x05, 0x1a, 0x05, 0x1b, 0x01, 0x0a, 0x01, 0x13, 0x02, 0x00, 0x01, 
	0x00, 0x28, 
	0x00, 0x28, 
	
}; // 40x39 Bitmap (1560 pixels) in 754 bytes

const uint16_t Kookaburra_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 31 entries
	0x0000, 0x62ea, 0x83cd, 0x736c, 0x3185, 0x8c0d, 0xb552, 0xb532, 0x9c8f, 0x5268, 0x2945, 0x2986, 0x2987, 0xa4d0, 0x3a08, 0x3a09, 
	0x1061, 0x18a2, 0x5248, 0x1903, 0x31e9, 0x29a8, 0x322b, 0x1926, 0x42ad, 0x2080, 0x30e1, 0x28c2, 0x38e0, 0x5961, 0x4921, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_Kookaburra_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(Kookaburra_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(Kookaburra_RLEBM_palette);
	bmInfo.width = 40;
	bmInfo.height = 39;
	bmInfo.flags = 0x00;
}
